// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2ZopttkBn2UrrF8ShV1G31
// Component: wkeLS_cqPuA-Uh
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Ratings from "../../Ratings"; // plasmic-import: 5h6c7k_6xpcUBj/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: 2ZopttkBn2UrrF8ShV1G31/projectcss
import * as sty from "./PlasmicProductCard.module.css"; // plasmic-import: wkeLS_cqPuA-Uh/css

import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: Cnertkq8aAZUCd/icon
import HeartOIcon from "./icons/PlasmicIcon__HeartO"; // plasmic-import: gVOJqqn4aIlaG1/icon
import ExpandIcon from "./icons/PlasmicIcon__Expand"; // plasmic-import: xJ-qtX5hjgl5h-/icon
import f1CR6HGwu1D0YNyw from "./images/f1.jpeg"; // plasmic-import: cR6hGWU1d0yNyw/picture

export type PlasmicProductCard__VariantMembers = {
  withReviews: "withReviews";
  onSale: "onSale";
};

export type PlasmicProductCard__VariantsArgs = {
  withReviews?: SingleBooleanChoiceArg<"withReviews">;
  onSale?: SingleBooleanChoiceArg<"onSale">;
};

type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  "withReviews",
  "onSale"
);

export type PlasmicProductCard__ArgsType = {
  title?: React.ReactNode;
  price?: React.ReactNode;
  image?: React.ReactNode;
  ratings?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "title",
  "price",
  "image",
  "ratings"
);

export type PlasmicProductCard__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProductCardProps {
  title?: React.ReactNode;
  price?: React.ReactNode;
  image?: React.ReactNode;
  ratings?: React.ReactNode;
  withReviews?: SingleBooleanChoiceArg<"withReviews">;
  onSale?: SingleBooleanChoiceArg<"onSale">;
  className?: string;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;
  dataFetches?: PlasmicProductCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__onSale]: hasVariant(variants, "onSale", "onSale"),
        [sty.root__withReviews]: hasVariant(
          variants,
          "withReviews",
          "withReviews"
        )
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__nV3R)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__nznOk)}
              role={"img"}
              src={f1CR6HGwu1D0YNyw}
            />
          ),

          value: args.image
        })}

        {(hasVariant(variants, "onSale", "onSale") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__q5KS0, {
              [sty.freeBox__onSale__q5KS0L7GwR]: hasVariant(
                variants,
                "onSale",
                "onSale"
              )
            })}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__epxsa
              )}
            >
              {"Sale"}
            </div>
          </div>
        ) : null}
        {(triggers.hover_root ? true : false) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__wxxlq)}
          >
            <ShoppingCartIcon
              className={classNames(defaultcss.all, sty.svg___4KDgF)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___8Hc
              )}
            >
              {"Add to cart"}
            </div>

            <HeartOIcon
              className={classNames(defaultcss.all, sty.svg__hufBa)}
              role={"img"}
            />

            <ExpandIcon
              className={classNames(defaultcss.all, sty.svg__qOcsr)}
              role={"img"}
            />
          </p.Stack>
        ) : null}
      </div>

      {(hasVariant(variants, "withReviews", "withReviews") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Ratings
                className={classNames("__wab_instance", sty.ratings__b6ZVb)}
              />
            ),

            value: args.ratings
          })
        : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__hrqyb)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Title",
          value: args.title,
          className: classNames(sty.slotTitle)
        })}

        {p.renderPlasmicSlot({
          defaultContents: "$100",
          value: args.price,
          className: classNames(sty.slotPrice)
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicProductCard__Fetches;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
